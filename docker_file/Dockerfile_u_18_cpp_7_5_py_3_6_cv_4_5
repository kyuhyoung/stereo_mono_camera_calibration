FROM vispci/vispci:ubuntu-18.04
#FROM vispci/vispci:ubuntu-20.04
#FROM rastasheep/ubuntu-sshd:20.04
WORKDIR /home

RUN apt-get update
RUN apt-get install -y cmake git build-essential

RUN git clone https://github.com/libigl/eigen.git
RUN cd eigen && mkdir build && cd build && cmake .. && make -j4 && make install

RUN apt-get update && apt-get install -y libsuitesparse-dev qtdeclarative5-dev qt5-qmake libqglviewer-dev-qt5 && rm -rf /var/lib/apt/lists/*
RUN find / -name "VISP*.cmake"
#RUN mkdir /code && cd /code && git clone -b 20170730_git https://github.com/RainerKuemmerle/g2o.git && cd ./g2o && mkdir build && cd build && cmake ../ && make -j4 && make install -j4
#RUN mkdir /code && cd /code && git clone https://github.com/RainerKuemmerle/g2o.git && cd ./g2o && git checkout a48ff8c42136f18fbe215b02bfeca48fa0c67507 && mkdir build && cd build && cmake ../ && make -j4 && make install -j4
#RUN mkdir /code && cd /code && git clone https://github.com/RainerKuemmerle/g2o.git && cd ./g2o && git checkout a48ff8c42136f18fbe215b02bfeca48fa0c67507 && mkdir build && cd build && cmake .. -DBUILD_WITH_MARCH_NATIVE=ON && make -j4 && make install -j4
#RUN mkdir /code && cd /code && git clone https://github.com/RainerKuemmerle/g2o.git && cd ./g2o && git checkout a48ff8c42136f18fbe215b02bfeca48fa0c67507 && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Debug && make -j4 && make install -j4
#RUN mkdir /code && cd /code && git clone https://github.com/RainerKuemmerle/g2o.git && cd ./g2o && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Debug && make -j4 && make install -j4
RUN mkdir /code && cd /code && git clone https://github.com/RainerKuemmerle/g2o.git && cd ./g2o && git checkout b5b20ee340bf371bbff4d4d6bee6722895fdf5f4 && mkdir build && cd build && cmake .. && make -j4 && make install -j4
RUN ldconfig
RUN apt-get update && apt-get install -y fish curl python2.7 python-tk
#RUN ln -s /usr/bin/python2.7 /usr/bin/python
#RUN add-apt-repository universe
#RUN apt update
RUN curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py && python2.7 get-pip.py
#RUN python -m pip install opencv-python numpy matplotlib
RUN python2.7 -m pip install numpy matplotlib


WORKDIR /
#ARG PYTHON_VERSION=3.9
ARG PYTHON_VERSION=2.7
ARG OPENCV_VERSION=4.5.3

# Needed for string substitution
SHELL ["/bin/bash", "-c"]
# https://techoverflow.net/2019/05/18/how-to-fix-configuring-tzdata-interactive-input-when-building-docker-images/
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe/Prague

# Install all dependencies for OpenCV
RUN \
# add sources for older pythons
    apt-get update --fix-missing && \
    apt-get install -y --no-install-recommends software-properties-common && \
    #add-apt-repository ppa:deadsnakes/ppa && \
    apt-add-repository universe && \

# Install all dependencies for OpenCV
    apt-get -y update -qq --fix-missing && \
    apt-get -y install --no-install-recommends \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-dev \
        $( [ ${PYTHON_VERSION%%.*} -ge 3 ] && echo "python${PYTHON_VERSION%%.*}-distutils" ) \
        wget \
        unzip \
        cmake \
        ffmpeg \
        libtbb2 \
        gfortran \
        apt-utils \
        pkg-config \
        checkinstall \
        qt5-default \
        build-essential \
        libopenblas-base \
        libopenblas-dev \
        liblapack-dev \
        libatlas-base-dev \
        #libgtk-3-dev \
        #libavcodec58 \
        libavcodec-dev \
        #libavformat58 \
        libavformat-dev \
        libavutil-dev \
        #libswscale5 \
        libswscale-dev \
        libjpeg8-dev \
        libpng-dev \
        libtiff5-dev \
        #libdc1394-22 \
        libdc1394-22-dev \
        libxine2-dev \
        libv4l-dev \
        libgstreamer1.0 \
        libgstreamer1.0-dev \
        libgstreamer-plugins-base1.0-0 \
        libgstreamer-plugins-base1.0-dev \
        libglew-dev \
        libpostproc-dev \
        libeigen3-dev \
        libtbb-dev \
        zlib1g-dev \
        libsm6 \
        libxext6 \
        libxrender1 \
        libhdf5-dev \
        libhdf5-serial-dev \
        #libhdf5-103 \
    && \

# install python dependencies
    # sysctl -w net.ipv4.ip_forward=1 ; \
    if [[ ${PYTHON_VERSION%%.*} -eq 2 ]] ; then \
        wget https://bootstrap.pypa.io/pip/2.7/get-pip.py --progress=bar:force:noscroll --no-check-certificate ; \
    else \
        apt-get -y install --no-install-recommends python${PYTHON_VERSION}-distutils ; \
        wget https://bootstrap.pypa.io/get-pip.py --progress=bar:force:noscroll --no-check-certificate ; \
    fi && \
    python${PYTHON_VERSION} get-pip.py && \
    rm get-pip.py && \
    pip${PYTHON_VERSION} install numpy scipy && \

# Install OpenCV
    wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip -O opencv.zip --progress=bar:force:noscroll --no-check-certificate && \
    unzip -q opencv.zip && \
    mv /opencv-${OPENCV_VERSION} /opencv && \
    rm opencv.zip && \
    wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip -O opencv_contrib.zip --progress=bar:force:noscroll --no-check-certificate && \
    unzip -q opencv_contrib.zip && \
    mv /opencv_contrib-${OPENCV_VERSION} /opencv_contrib && \
    rm opencv_contrib.zip && \

# Prepare build
    mkdir /opencv/build && \
    cd /opencv/build && \
    cmake \
      -D CMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_PYTHON_SUPPORT=ON \
      -D BUILD_DOCS=OFF \
      -D BUILD_PERF_TESTS=OFF \
      -D BUILD_TESTS=OFF \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules \
      -D BUILD_opencv_python3=$( [ ${PYTHON_VERSION%%.*} -ge 3 ] && echo "ON" || echo "OFF" ) \
      -D BUILD_opencv_python2=$( [ ${PYTHON_VERSION%%.*} -lt 3 ] && echo "ON" || echo "OFF" ) \
      -D PYTHON${PYTHON_VERSION%%.*}_EXECUTABLE=$(which python${PYTHON_VERSION}) \
      -D PYTHON_DEFAULT_EXECUTABLE=$(which python${PYTHON_VERSION}) \
      -D BUILD_EXAMPLES=OFF \
      -D WITH_IPP=OFF \
      -D WITH_FFMPEG=ON \
      -D WITH_GSTREAMER=ON \
      -D WITH_V4L=ON \
      -D WITH_LIBV4L=ON \
      -D WITH_TBB=ON \
      -D WITH_QT=ON \
      -D WITH_OPENGL=ON \
      -D WITH_LAPACK=ON \
      #-D WITH_HPX=ON \
      -D ENABLE_PRECOMPILED_HEADERS=OFF \
      -D OPENCV_GENERATE_PKGCONFIG=ON \
      .. \
    && \

# Build, Test and Install
    cd /opencv/build && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \

# cleaning
#    apt-get -y remove \
#        unzip \
#        cmake \
#        gfortran \
#        apt-utils \
#        pkg-config \
#        checkinstall \
#        build-essential \
#        libopenblas-dev \
#        liblapack-dev \
#        libatlas-base-dev \
#        #libgtk-3-dev \
#        libavcodec-dev \
#        libavformat-dev \
#        libavutil-dev \
#        libswscale-dev \
#        libjpeg8-dev \
#        libpng12-dev \
#        libtiff5-dev \
#        libdc1394-22-dev \
#        libxine2-dev \
#        libv4l-dev \
#        libgstreamer1.0-dev \
#        libgstreamer-plugins-base1.0-dev \
#        libglew-dev \
#        libpostproc-dev \
#        libeigen3-dev \
#        libtbb-dev \
#        zlib1g-dev \
#    && \
#    apt-get autoremove -y && \
#    apt-get clean && \
#    rm -rf /opencv /opencv_contrib /var/lib/apt/lists/* && \

# Set the default python and install PIP packages
    update-alternatives --install /usr/bin/python${PYTHON_VERSION%%.*} python${PYTHON_VERSION%%.*} /usr/bin/python${PYTHON_VERSION} 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python${PYTHON_VERSION} 1 && \

# Call default command.
    ffmpeg -version && \
    #ldd `which ffmpeg` && \
    python2.7 --version && \
    python2.7 -c "import cv2 ; print(cv2.__version__)"

RUN apt-get install -y libudev-dev

ENV LD_LIBRARY_PATH /usr/local/lib:/root/visp-ws/visp-build/lib:$LD_LIBRARY_PATH
CMD bash
